{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../App.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import {scale} from 'svelte/transition';\n  import {groups} from './test';\n  import {test} from './store.js';\n  import Greeting from \"./Greeting.svelte\";\n  import Question from \"./Question.svelte\";\n  import Results from \"./Results.svelte\";\n\n  let isDark = window.matchMedia(\"(prefers-color-scheme: dark)\").matches;\n  let activeStep = -1;\n  let results = [];\n\n  let newvalueX;\n  let newvalueY;\n  const movementStrength = 25;\n  const height = movementStrength / window.innerHeight;\n  const width = movementStrength / window.innerWidth;\n\n  const onMouseMove = (event) => {\n    let pageX = event.pageX - (window.innerWidth / 2);\n    let pageY = event.pageY - (window.innerHeight / 2);\n    newvalueX = width * pageX * - 1 - 25;\n    newvalueY = height * pageY * - 1 - 50;\n  };\n\n  const nextStep = (event) => {\n    activeStep += 1;\n    if (event.detail.group) {\n      console.log(event.detail);\n      results = [...results, event.detail.group];\n    }\n  };\n\n  const prevStep = () => {\n    activeStep -= 1;\n    if (results.length) results = [...results.pop()];\n  };\n</script>\n\n<div class=\"wrap {isDark ? 'violet' : 'orange'}\" style=\"background-position: {newvalueX}px {newvalueY}px\" on:mousemove={onMouseMove}>\n  <div class=\"test container\">\n\n      {#if activeStep === -1}\n        <div class=\"ttt\" in:scale=\"{{duration: 350, delay: 350, opacity: 0, start: 0.5}}\"\n             out:scale=\"{{duration: 350, opacity: 0, start: 0.5}}\">\n          <Greeting/>\n          <div class=\"test buttons\">\n            <button class=\"test button\" on:click={nextStep}><span>Далее</span></button>\n          </div>\n        </div>\n      {:else if activeStep < test.length}\n          {#each test as t, i}\n              {#if i === activeStep}\n                <div class=\"ttt\" in:scale=\"{{duration: 350, delay: 350, opacity: 0, start: 0.5}}\"\n                     out:scale=\"{{duration: 350, opacity: 0, start: 0.5}}\">\n                  <Question totalQuestions={test.length} question={t} index={i} on:next={nextStep} on:prev={prevStep}\n                            results={results}/>\n                </div>\n              {/if}\n          {/each}\n      {:else}\n      <div class=\"result\" in:scale=\"{{duration: 350, delay: 350, opacity: 0, start: 0.5}}\"\n           out:scale=\"{{duration: 350, opacity: 0, start: 0.5}}\">\n        <Results />\n      </div>\n      {/if}\n  </div>\n  <input type=\"checkbox\" class=\"switch input\" id=\"switch\" bind:checked={isDark}><label class=\"switch label\"\n                                                                                       for=\"switch\">Переключить\n  тему</label>\n</div>\n\n<style>\n\n  .test.container {\n    position: relative;\n  }\n\n  .ttt {\n    position: absolute;\n    left: 120px;\n    right: 120px;\n    top: 120px;\n    bottom: 120px;\n    display: flex;\n    justify-content: center;\n    flex-direction: column;\n  }\n</style>\n"
  ],
  "names": [],
  "mappings": "AA0EE,KAAK,UAAU,eAAC,CAAC,AACf,QAAQ,CAAE,QAAQ,AACpB,CAAC,AAED,IAAI,eAAC,CAAC,AACJ,QAAQ,CAAE,QAAQ,CAClB,IAAI,CAAE,KAAK,CACX,KAAK,CAAE,KAAK,CACZ,GAAG,CAAE,KAAK,CACV,MAAM,CAAE,KAAK,CACb,OAAO,CAAE,IAAI,CACb,eAAe,CAAE,MAAM,CACvB,cAAc,CAAE,MAAM,AACxB,CAAC"
}